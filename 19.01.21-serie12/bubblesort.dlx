



/ It is assumed, that R1 contains the length of the list, as in the number of
/ elements the list contains.

/* Register Layout */

r1      length of the list to sort, used as i
r2      counter variable j
r3      general purpose (boolean, helper operations), will be called 'g'
r30     stack pointer (Top of Stack)


/***************************** START: BUBBLESORT ******************************/

// Init Registers

add     r2,r0,r0        / j = 0
add     r3,r0,r0        / g = 0
addi    r30,r0,#1000    / TOS = 1000


/= START: Outer loop ==========================================================/
outer_loop:


/= START: Inner loop ==========================================================/
// reset j to 0
add     r2,r0,r0

inner_loop:

/= ===== START: CALL to SORT ==================================================/
        
        // Push registers to stack
        sw      0(r30),r1
        sw      4(r30),r2
        sw      8(r30),r3
        
        // Set argument to SORT
        
        / Compute the offset of the i-th element of the list in bytes
        addi    r3,r0,#4        / g = 4
        mult    r3,r2,r3        / g = g * i = 4 * i
        
        / Apply the offset to the beginning of the list, to produce the
	/ address of the i-th element of the list
        addi    r3,r3,#1200     / g = g+1200 = 1200 + 4 * i
        
	/ set r1 (the argument) to the address of the i-th element
        add     r1,r0,r3
        
        // Increase TOS
        addi    r30,r30,#12     / pushed 3 words, so increase by 3+1 steps
        
        // Call SORT
        jal     SORT
        
        // Decrease TOS
        subi    r30,r30,#12
        
        // Pop registers from stack
        lw      r1,0(r30)
        lw      r2,4(r30)
        lw      r3,8(r30)

/= ===== END: CALL to SORT ====================================================/

// Continue looping the inner loop or break?
addi    r2,r2,#1        / j++
subi    r3,r1,#1        / g = i-1
slt     r3,r2,r3        / j < g? which is equivalent to j < i-1?
bnez    r3,inner_loop   / If true, you must repeat!
                        / If false, continue outer_loop

/= END: Inner loop ============================================================/


// Continue looping the outer loop or is the program done?
subi    r1,r1,#1        / i--
seqi    r3,r1,#1        / i == 1 ?
beqz    r3,outer_loop   / If false, the list isn't yet sorted!
                        / If true, End

/= END: Outer loop ============================================================/

End:    Halt

/****************************** END: BUBBLESORT *******************************/


/= START: Sort function (or sub-program) ======================================/

SORT:
        // Save registers
        sw 0(r30),r2            / save whatever's in r2
        sw 4(r30),r3            / save whatever's in r3

        // Load a and b
        / r1 contains the first address to load from
        lw r2,0(r1)             / load a
        lw r3,4(r1)             / load b

        // Sort a and b
        slt r3,r3,r2            / b < a ?
        bnez r3,sort_swap       / if so, swap!
        j sort_end              / else, there's nothing to do

        // Swap a and b in memory
sort_swap:
        lw r3,4(r1)             / load b (again)
        sw 0(r1),r3             / write b into a's address
        sw 4(r1),r2             / write a into b's address

        // Restore the registers and return
sort_end:
        lw r2,0(r30)            / restore r2
        lw r3,4(r30)            / restore r3
        jalr r31                / jump back to main program

/= END: Sort function =========================================================/
