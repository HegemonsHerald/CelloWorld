/* Mutliply like the egyptians did */

/ This program -- like any program -- first sets up its registers, loading the
/ factors to multiply.

/ It proceeds to loop while the factor n is bigger than 0. This condition is
/ simply checked by comparing n to R0. If n isn't bigger than 0, the program
/ will terminate.

/ Now the program has to check, whether n is even or odd. It does so, by
/ inspecting only the least significant bit of n, by `and`-ing n with 1. If the
/ LSB is 0 then n is even, else it's odd.

/ If n is even, the program adds m to itself to double it, and divides n by 2 by
/ shifting it right using the arithmetic shift.

/ If n is odd, the program adds m to the result register and subtracts 1 from n.

/ In either case the program then jumps back to the beginning of the loop.

/ Right before terminating the program still writes its result value to the
/ memory position after the second factor. Since there are two factors starting
/ at address 1000, that would be 1008.


/ For this program and this algorithm to work n must be larger or equal to 0. If
/ n is negative the result will always be 0. The factor m may be negative.

/ It shall also be noted, that we assume the two factors to be stored as whole
/ words in memory, as it wasn't explicitely specified. If the factors were
/ significantly smaller than 2^30, they might just be single bits or bytes,
/ stored all in one word.


/* Register Layout */

/ R1	result
/ R2	n
/ R3	m
/ R4	generic boolean register


/* Init Registers */

ADD	R1,R0,R0	/ Result = 0
LW	R2,1000(R0)	/ Load n
LW	R3,1004(R0)	/ Load m
ADD	R4,R0,R0	/ Generic boolean = 0


/* Do the Algorithm */

Loop:	SLT	R4,R0,R2	/ 0 < n ?
	BEQZ	R4,End		/ If false, you're done!

	ANDI	R4,R2,#1	/ n even? That is: n `and` 1 == 0?
	BEQZ	R4,EVEN		/ n is even!

	// n is odd
ODD:	ADD	R1,R1,R3	/ Result = result + m
	SUBI	R2,R2,#1	/ n = n - 1
	J	Loop

	// n is even
EVEN:	ADD	R3,R3,R3	/ m = m + m
	SRAI	R2,R2,#1	/ n = n / 2
	J	Loop

End:	SW	1008(R0),R1	/ Write the result to memory
	HALT
