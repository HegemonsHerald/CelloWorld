/* The Sort Function or sub-program */

/ As per requirements this function expects to find its argument
/ - the address from which to draw two numbers, to possibly swap the order of -
/ in register 1.

/ Since this function is to be used as a sub-program, the first thing it does is
/ save the registers it uses during its operation.

/ The function only changes 2 registers, so it only saves and later restores
/ those 2 registers.

/ After the registers have been pushed to the stack, the first of the two words,
/ that are to be sorted, is loaded into register 2. That word will be called 'a'.
/ Next the second word is loaded into register 3. That word will be called 'b'.

/ Afterwards the two words are compared using 'b > a'. The result of this
/ comparison overwrites b in register 3. The reasoning for that is this:
/ If a and b are in the correct order, now the registers only need to be
/ restored.
/ If they aren't, one must re-load b into register 3 in order to write it, which
/ adds one instruction. But using an extra boolean register would add two
/ instructions, one for saving and one for restoring the boolean register.
/ So either way, overwriting register 3 gets away with fewer instructions.

/ Based on the outcome of the comparison the program either jumps to its end,
/ where it restores the used registers and jumps back to the value in the jump
/ register, or it re-loads b into register 3, then writes a into the memory
/ position of b and b into the memory position, where a came from, effectively
/ swapping the two. After that the program will jump to its end, restore the
/ registers and jump back with R31, as well.


/* The Register Layout */

/ R1	The address at which the first of the two words to sort, can be found.
/	The second word comes right after at R1+4. This is the expected argument.

/ R2	The first of the two numbers, called 'a'
/ R3	The second of the two numbers, called 'b', also used as the boolean
/	value for the size comparison 'b > a'


/= START: SORT function (or sub-program) ======================================/

SORT:
        // Save registers
        SW 0(R30),R2            / Save whatever's in R2
        SW 4(R30),R3            / Save whatever's in R3

        // Load a and b
        / R1 contains the first address to load from
        LW R2,0(R1)             / Load a
        LW R3,4(R1)             / Load b

        // Sort a and b
        SLT R3,R3,R2            / b < a ?
        BNEZ R3,sort_swap       / If so, swap!
        J sort_end              / Else, there's nothing to do

        // Swap a and b in memory
sort_swap:
        LW R3,4(R1)             / Load b (again)
        SW 0(R1),R3             / Write b into a's address
        SW 4(R1),R2             / Write a into b's address

        // Restore the registers and return
sort_end:
        LW R2,0(R30)            / Restore R2
        LW R3,4(R30)            / Restore R3
        JALR R31                / Jump back to main program (return)

/= END: SORT function =========================================================/
